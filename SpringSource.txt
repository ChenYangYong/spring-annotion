new AnnotationConfigApplicationContext(class);在执行时，会创建DefaultListableBeanFactory，然后按照class信息加载各种bean的定义信息放入DefaultListableBeanFactory
spring容器refresh()【创建刷新】;
1、prepareRefresh()刷新前的预处理；
    1）、initPropertySources();初始化一些属性设置；子类自定义个性化的属性设置
    2）、getEnvironment().validateRequiredProperties();检验属性的合
    3）、this.earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>();保存容器中早期的事件
2、obtainFreshBeanFactory();获取BeanFactory
    1）、refreshBeanFactory();刷新【创建】BeanFactory
         创建了一个this.beanFactory = new DefaultListableBeanFactory();
	 设置id;
    2）、将创建的BeanFactory【DefaultListableBeanFactory】返回
3、prepareBeanFactory(beanFactory);BeanFactory预处理（BeanFactory进行一些设置）
    1）、设置BeanFactory的类加载器、支持表达器解析器等。
    2）、添加部分BeanPostProcessor【ApplicationContextAwareProcessor】

4、postProcessBeanFactory(beanFactory);BeanFactory准备工作完成后进行进行的后置工作处理
    1）、子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步处理
==============================以上是BeanFactory的创建及预准备工作=========================
5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessors
    BeanFactoryPostProcessors：BeanFactory的后置处理器；在BeanFactory标准初始化之后执行
    两个接口：BeanFactoryPostProcessors和BeanDefinitionRegistryPostProcessor
    1、先执行BeanDefinitionRegistryPostProcessor实现类的postProcessBeanDefinitionRegistry方法，按优先级执行
    2、再执行BeanFactoryPostProcessors实现类的postProcessBeanFactory方法，按优先级执行
6、registerBeanPostProcessors(beanFactory);注册BeanPostProcessor（bean的后置处理器），拦截所有bean的创建过程
   五个接口；BeanPostProcessor、DestructionAwareBeanPostProcessor、InstantiationAwareBeanPostProcessor、
             MergedBeanDefinitionPostProcessor、SmartInstantiationAwareBeanPostProcessor
7、initMessageSource();初始化MessageSource组件(国际化，消息绑定)
8、initApplicationEventMulticaster();初始化事件广播器，负责各事件的广播
9、onRefresh();留给子类执行
10、registerListeners();注册监听器，并派发之前缓存的事件
11、finishBeanFactoryInitialization(beanFactory);初始化所有的单实例
12、finishRefresh();